import json
import os
import time

with open('/home/prasad67/vca_cca/bess_config', 'r') as f:
    bess_conf = eval(f.read().strip())

left_clients = bess_conf['left_clients'] # a list of tuples of (ip, mac) pairs
right_clients = bess_conf['right_clients']
bg_client = bess_conf['bg_client']

speed_mbps = bess_conf['bw_mbps']
q_size_packets = bess_conf['q_size_packets']

left_nic_pci = bess_conf['left_nic_pci']
right_nic_pci = bess_conf['right_nic_pci']
bg_nic_pci = bess_conf['bg_nic_pci']

left_nic_mac = bess_conf['left_nic_mac']
right_nic_mac = bess_conf['right_nic_mac']
bg_nic_mac = bess_conf['bg_nic_mac']

left_nic::PMDPort(pci=left_nic_pci)
right_nic::PMDPort(pci=right_nic_pci)
bg_nic::PMDPort(pci=bg_nic_pci)

left_in::PortInc(port=left_nic)
left_out::PortOut(port=left_nic)

right_in::PortInc(port=right_nic)
right_out::PortOut(port=right_nic)

bg_in::PortInc(port=bg_nic)
bg_out::PortOut(port=bg_nic)

left_log = bess_conf['left_queue_name']
right_log = bess_conf['right_queue_name']

latency = bess_conf['rtt']

cmd_file = '/home/prasad67/vca_cca/filename.cmd'
with open(cmd_file, 'w') as file:
      file.write(left_log)
      file.close()

btl_queue_left::Queue(size=q_size_packets, backpressure=False)
btl_queue_left.set_burst(burst=bess_conf['left_btl'])
bess.add_tc('bit_limit',
      policy='rate_limit',
      resource='bit',
      limit={'bit': int(speed_mbps*1024*1024)})
btl_queue_left.attach_task(parent='bit_limit')

with open(cmd_file, 'w') as file:
      file.write(right_log)
      file.close()

btl_queue_right::Queue(size=q_size_packets, backpressure=False)
btl_queue_right.set_burst(burst=bess_conf['right_btl'])
bess.add_tc('bit_limit2',
      policy='rate_limit',
      resource='bit',
      limit={'bit': int(speed_mbps*1024*1024)})
btl_queue_right.attach_task(parent='bit_limit2')

em_left::ExactMatch(fields=[{'offset':0, 'num_bytes':6}])
em_left.add(fields=[{'value_bin':bytes(bytearray.fromhex(left_nic_mac))}], gate=0)
em_right::ExactMatch(fields=[{'offset':0, 'num_bytes':6}])
em_right.add(fields=[{'value_bin':bytes(bytearray.fromhex(right_nic_mac))}], gate=0)
em_bg::ExactMatch(fields=[{'offset':0, 'num_bytes':6}])
em_bg.add(fields=[{'value_bin':bytes(bytearray.fromhex(bg_nic_mac))}], gate=0)

merger_left::Merge()
merger_right::Merge()

ip_match::IPLookup()
ip_match2::IPLookup()

for i, ip_mac_pair in enumerate(right_clients):
      for j in range(len(ip_mac_pair[0])):
        ip_match.add(prefix=ip_mac_pair[0][j][0], prefix_len=ip_mac_pair[0][j][1], gate=i)

      ip_match:i -> Update(fields=[{'offset': 0, 'size': 6, 'value': int(ip_mac_pair[1], 16)},
                                    {'offset': 6, 'size': 6, 'value': int(right_nic_mac, 16)}]) -> merger_right

for i, ip_mac_pair in enumerate(left_clients):
      ip_match.add(prefix=ip_mac_pair[0][0], prefix_len=32, gate=i + len(right_clients))
      ip_match2.add(prefix=ip_mac_pair[0][0], prefix_len=32, gate=0)
      ip_match:(i + len(right_clients)) -> Update(fields=[{'offset': 0, 'size': 6, 'value': int(ip_mac_pair[1], 16)},
                                    {'offset': 6, 'size': 6, 'value': int(left_nic_mac, 16)}]) -> merger_left

ip_match.add(prefix=bg_client[0], prefix_len=32, gate=2)
ip_match:2 -> Update(fields=[{'offset': 0, 'size': 6, 'value': int(bg_client[1], 16)},
					{'offset': 6, 'size': 6, 'value': int(bg_nic_mac, 16)}]) -> merger_left

ip_match2.add(prefix=bg_client[0], prefix_len=32, gate=1)

left_in -> em_left
em_left:0 ->ip_match

right_in -> em_right
em_right:0 -> ip_match # packets from the right can only go left

merger_left -> btl_queue_left -> ip_match2
merger_right -> btl_queue_right -> right_out

bg_in -> em_bg
em_bg:0 -> ip_match

ip_match2:0 -> left_out
ip_match2:1 -> bg_out

bess.resume_all()

open("/home/prasad67/bandwidth.log", "w").close()

bw_config = bess_conf['bw_config']
for bw_mbps, duration in bw_config:
	with open("/home/prasad67/bandwidth.log", "a") as file:
	    file.write(str(time.time()) + " " + str(int(bw_mbps*1024*1024)) + "\n")
	#print("setting stuff " + str(bw_mbps) + " " + str(duration))
	bess.update_tc_params('bit_limit', resource='bit', limit={'bit':int(bw_mbps*1024*1024)})	
	bess.update_tc_params('bit_limit2', resource='bit', limit={'bit':int(bw_mbps*1024*1024)})	
	time.sleep(duration)
